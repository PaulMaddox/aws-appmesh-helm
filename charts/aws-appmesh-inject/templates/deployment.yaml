apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aws-appmesh-inject.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "aws-appmesh-inject.name" . }}
    helm.sh/chart: {{ include "aws-appmesh-inject.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "aws-appmesh-inject.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "aws-appmesh-inject.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "aws-appmesh-inject.name" . }}
      containers:
        - name: webhook
          image: "{{ .Values.webHookImage.repository }}:{{ .Values.webHookImage.tag }}"
          env:
            - name: APPMESH_NAME
              value: {{ .Values.meshName }}
            - name: APPMESH_LOG_LEVEL
              value: {{ .Values.logLevel }}
          imagePullPolicy: Always
          command:
            - ./appmeshinject
            - -sidecar-image={{ .Values.envoyImage.repository }}:{{ .Values.envoyImage.tag }}
            - -init-image={{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}
            - -inject-xray-sidecar={{ .Values.enableStatsDTags }}
            - -enable-statsd={{ .Values.enableStatsD }}
            - -inject-statsd-exporter-sidecar={{ .Values.enableStatsDExporter }}
            - -enable-stats-tags={{ .Values.enableStatsDTags }}
          resources:
            limits:
              memory: 500Mi
              cpu: 300m
            requests:
              memory: 500Mi
              cpu: 300m
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTPS
            initialDelaySeconds: 1
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            readOnlyRootFilesystem: true
      volumes:
        - name: webhook-certs
          secret:
            secretName: {{ template "aws-appmesh-inject.name" . }}-certs
